import axios from 'axios'
import { Message, MessageBox } from 'element-ui'
import store from '../store'
import { getToken } from '@/utils/auth'

let qs = require('qs')

let CancelToken = axios.CancelToken,
    source = CancelToken.source()

// 创建axios实例
const service = axios.create({
  baseURL: process.env.BASE_API, // api的base_url
  timeout: 15000, // 请求超时时间
  headers: {
    'Content-Type': 'application/x-www-form-urlencoded'
  },
  cancelToken: source.token
})

// request拦截器
service.interceptors.request.use(config => {
  let params = config.data || config.params,  //传参
  router = params && params.router || '',                   //需要在响应头header加router字段及相应内容
  method = config.method                   //请求方式：post || get

  // console.log(params, "1111111111111")
  // console.log('====================================================================')
  // console.log(router)

  let methodObj = {
    "post": () => {
      params = qs.stringify(params)
      config.data = params
    },
    "get": () => {
      config.params = params
    }
  }
  
  params && router && (config.headers.router = router)

  if (store.getters.token) {
    config.headers['juid'] = getToken() // 让每个请求携带自定义token 请根据实际情况自行修改
  }

  methodObj[method]()

  return config
}, error => {
  // Do something with request error
  console.log(error) // for debug
  Promise.reject(error)
})

// respone拦截器
service.interceptors.response.use(
  response => {
  /**
  * code为非20000是抛错 可结合自己业务进行修改
  */
    const res = response.data
    if(res.result == 1){
      Message({
            message: res.expMessage,
            type: 'error',
            duration: 5 * 1000
          })
      console.log('======================================================================================')
      console.log(res.expMessage)
      console.log('======================================================================================')
      return Promise.reject('error')
    }
    
    // if (res.code !== 20000) {
    //   Message({
    //     message: res.juid,
    //     type: 'error',
    //     duration: 5 * 1000
    //   })

      // 50008:非法的token; 50012:其他客户端登录了;  50014:Token 过期了;
      // if (res.code === 50008 || res.code === 50012 || res.code === 50014) {
      //   MessageBox.confirm('你已被登出，可以取消继续留在该页面，或者重新登录', '确定登出', {
      //     confirmButtonText: '重新登录',
      //     cancelButtonText: '取消',
      //     type: 'warning'
      //   }).then(() => {
      //     store.dispatch('FedLogOut').then(() => {
      //       location.reload()// 为了重新实例化vue-router对象 避免bug
      //     })
      //   })
      // }
      // return Promise.reject('error')
    // } else {
    //   return res
    // }
    return res
  },
  error => {
    console.log('err' + error)// for debug
    if (error && error.response) {
      switch (error.response.status) {
        case 400:
          error.message = '请求错误'
          break
  
        case 401:
          error.message = '未授权，请登录'
          break
  
        case 403:
          error.message = '拒绝访问'
          break
  
        case 404:
          error.message = `请求地址出错: ${error.response.config.url}`
          break
  
        case 408:
          error.message = '请求超时'
          break
  
        case 500:
          error.message = '服务器内部错误'
          break
  
        case 501:
          error.message = '服务未实现'
          break
  
        case 502:
          error.message = '网关错误'
          break
  
        case 503:
          error.message = '服务不可用'
          break
  
        case 504:
          error.message = '网关超时'
          break
  
        case 505:
          error.message = 'HTTP版本不受支持'
          break
  
        default:
      }
    }

    Message({
      message: error.message,
      type: 'error',
      duration: 5 * 1000
    })

    
    return Promise.reject(error)
  }
)

export default service
